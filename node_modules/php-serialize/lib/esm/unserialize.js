var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import invariant from 'assert';
// eslint-disable-next-line import/no-cycle
import Parser from './parser';
import { isInteger, getClass, getIncompleteClass, __PHP_Incomplete_Class } from './helpers';
function getClassReference(className, scope, strict) {
    var container;
    var classReference = scope[className];
    invariant(classReference || !strict, "Class " + className + " not found in given scope");
    if (classReference) {
        // @ts-ignore
        container = new (getClass(classReference.prototype))();
    }
    else {
        container = getIncompleteClass(className);
    }
    return container;
}
function unserializePairs(parser, length, scope, options) {
    var pairs = [];
    for (var i = 0; i < length; i += 1) {
        var key = unserializeItem(parser, scope, options);
        parser.seekExpected(';');
        var value = unserializeItem(parser, scope, options);
        if (parser.peekAhead(1) === ';') {
            parser.advance(1);
        }
        pairs.push({ key: key, value: value });
    }
    return pairs;
}
function unserializeItem(parser, scope, options) {
    var type = parser.getType();
    if (type === 'null') {
        return null;
    }
    if (type === 'int' || type === 'float') {
        var value = parser.readUntil(';');
        return type === 'int' ? parseInt(value, 10) : parseFloat(value);
    }
    if (type === 'boolean') {
        var value = parser.readAhead(1);
        return value === '1';
    }
    if (type === 'string') {
        return parser.getByLength('"', '"', function (length) { return parser.readAhead(length); });
    }
    if (type === 'array-object') {
        var pairs = parser.getByLength('{', '}', function (length) { return unserializePairs(parser, length, scope, options); });
        var isArray = pairs.every(function (item, idx) { return isInteger(item.key) && idx === item.key; });
        var result_1 = isArray ? [] : {};
        pairs.forEach(function (_a) {
            var key = _a.key, value = _a.value;
            result_1[key] = value;
        });
        return result_1;
    }
    if (type === 'notserializable-class') {
        var name = parser.getByLength('"', '"', function (length) { return parser.readAhead(length); });
        parser.seekExpected(':');
        var pairs = parser.getByLength('{', '}', function (length) { return unserializePairs(parser, length, scope, options); });
        var result_2 = getClassReference(name, scope, options.strict);
        var PREFIX_PRIVATE_1 = "\0" + name + "\0";
        var PREFIX_PROTECTED_1 = "\0*\0";
        pairs.forEach(function (_a) {
            var key = _a.key, value = _a.value;
            if (key.startsWith(PREFIX_PRIVATE_1)) {
                // Private field
                result_2[key.slice(PREFIX_PRIVATE_1.length)] = value;
            }
            else if (key.startsWith(PREFIX_PROTECTED_1)) {
                // Protected field
                result_2[key.slice(PREFIX_PROTECTED_1.length)] = value;
            }
            else {
                result_2[key] = value;
            }
        });
        return result_2;
    }
    if (type === 'serializable-class') {
        var name = parser.getByLength('"', '"', function (length) { return parser.readAhead(length); });
        parser.seekExpected(':');
        var payload = parser.getByLength('{', '}', function (length) { return parser.readAhead(length); });
        var result = getClassReference(name, scope, options.strict);
        if (!(result instanceof __PHP_Incomplete_Class)) {
            invariant(result.unserialize, "unserialize not found on class when processing '" + name + "'");
            result.unserialize(payload);
        }
        return result;
    }
    throw new Error("Invalid type '" + type + "' encounterd while unserializing");
}
function unserialize(item, scope, givenOptions) {
    if (scope === void 0) { scope = {}; }
    if (givenOptions === void 0) { givenOptions = {}; }
    var options = __assign({}, givenOptions);
    if (typeof options.strict === 'undefined') {
        options.strict = true;
    }
    if (typeof options.encoding === 'undefined') {
        options.encoding = 'utf8';
    }
    var parser = new Parser(Buffer.from(item), 0, options);
    return unserializeItem(parser, scope, options);
}
export default unserialize;
