"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var helpers_1 = require("./helpers");
function getClassNamespace(item, scope) {
    return (Object.keys(scope).find(function (key) { return item instanceof scope[key]; }) || item.__PHP_Incomplete_Class_Name || item.constructor.name);
}
function serializeObject(item, scope) {
    var processed = Array.isArray(item)
        ? item.map(function (value, index) { return "" + serialize(index, scope) + serialize(value, scope); })
        : Object.keys(item).map(function (key) { return "" + serialize(key, scope) + serialize(item[key], scope); });
    var length = processed.filter(function (entry) { return typeof entry !== 'undefined'; }).length;
    return length + ":{" + processed.join('') + "}";
}
function serialize(item, scope, givenOptions) {
    if (scope === void 0) { scope = {}; }
    if (givenOptions === void 0) { givenOptions = {}; }
    var type = typeof item;
    var options = __assign({}, givenOptions);
    if (typeof options.encoding === 'undefined') {
        options.encoding = 'utf8';
    }
    if (item === null) {
        return 'N;';
    }
    if (type === 'number') {
        if (helpers_1.isInteger(item)) {
            return "i:" + item + ";";
        }
        return "d:" + item.toString().toUpperCase() + ";";
    }
    if (type === 'string') {
        return "s:" + helpers_1.getByteLength(item, options) + ":\"" + item + "\";";
    }
    if (type === 'boolean') {
        return "b:" + (item ? '1' : '0') + ";";
    }
    if (type !== 'object') {
        throw new TypeError("Unexpected type '" + type + "' encountered while attempting to serialize");
    }
    if (Array.isArray(item) || item.constructor.name === 'Object') {
        return "a:" + serializeObject(item, scope);
    }
    var constructorName = getClassNamespace(item, scope);
    if (typeof item.serialize === 'function') {
        var serialized = item.serialize();
        assert_1.default(typeof serialized === 'string', item.constructor.name + ".serialize should return a string");
        return "C:" + constructorName.length + ":\"" + constructorName + "\":" + helpers_1.getByteLength(serialized, options) + ":{" + serialized + "}";
    }
    return "O:" + constructorName.length + ":\"" + constructorName + "\":" + serializeObject(item, scope);
}
exports.default = serialize;
