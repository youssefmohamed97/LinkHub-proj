{"version":3,"file":"index.js","sources":["../../../src/index.ts"],"sourcesContent":["export * from './exports';\n\nimport { addExtensionMethods } from './extensions';\nimport * as Integrations from './node/integrations';\n\nexport { Integrations };\n\n// This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\nexport {\n  BrowserTracing,\n  BROWSER_TRACING_INTEGRATION_ID,\n  instrumentOutgoingRequests,\n  defaultRequestInstrumentationOptions,\n} from './browser';\n\nexport type { RequestInstrumentationOptions } from './browser';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean;\n\n// Guard for tree\nif (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {\n  // We are patching the global object with our hub extension methods\n  addExtensionMethods();\n}\n\nexport { addExtensionMethods };\n"],"names":[],"mappings":";;;;;;;;AAgCA;;AAGA;AACA,IAAA,OAAA,kBAAA,KAAA,WAAA,IAAA,kBAAA,EAAA;AACA;AACA,EAAA,mBAAA,EAAA,CAAA;AACA"}