{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA+CA,MAAa,kBAAmB,SAAQ,KAAK;IAC3C,YAAY,OAAe,EAAkB,SAAiB;QAC5D,KAAK,CAAC,OAAO,CAAC,CAAC;QAD4B,cAAS,GAAT,SAAS,CAAQ;IAE9D,CAAC;CACF;AAJD,gDAIC","sourcesContent":["import type * as express from \"express\";\nimport * as passport from \"passport\";\nimport { Profile, SamlConfig } from \"@node-saml/node-saml\";\n\nexport interface AuthenticateOptions extends passport.AuthenticateOptions {\n  samlFallback?: \"login-request\" | \"logout-request\";\n  additionalParams?: Record<string, any>;\n}\n\nexport interface AuthorizeOptions extends AuthenticateOptions {\n  samlFallback?: \"login-request\" | \"logout-request\";\n}\n\nexport interface StrategyOptions {\n  name?: string;\n  passReqToCallback?: boolean;\n}\n\nexport type User = Record<string, unknown>;\n\nexport interface RequestWithUser extends express.Request {\n  samlLogoutRequest: Profile;\n  user: User;\n}\n\nexport type VerifiedCallback = (\n  err: Error | null,\n  user?: Record<string, unknown>,\n  info?: Record<string, unknown>\n) => void;\n\nexport type VerifyWithRequest = (\n  req: express.Request,\n  profile: Profile | null,\n  done: VerifiedCallback\n) => void;\n\nexport type VerifyWithoutRequest = (profile: Profile | null, done: VerifiedCallback) => void;\n\nexport type StrategyOptionsCallback = (err: Error | null, samlOptions?: SamlConfig) => void;\n\ninterface BaseMultiStrategyConfig {\n  getSamlOptions(req: express.Request, callback: StrategyOptionsCallback): void;\n}\n\nexport type MultiStrategyConfig = Partial<SamlConfig> & StrategyOptions & BaseMultiStrategyConfig;\n\nexport class ErrorWithXmlStatus extends Error {\n  constructor(message: string, public readonly xmlStatus: string) {\n    super(message);\n  }\n}\n"]}