{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../src/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { removeCertPEMHeaderAndFooter } from \"./crypto\";\nimport {\n  isValidSamlSigningOptions,\n  ServiceMetadataXML,\n  XMLObject,\n  GenerateServiceProviderMetadataParams,\n} from \"./types\";\nimport { assertRequired, signXmlMetadata } from \"./utility\";\nimport { buildXmlBuilderObject } from \"./xml\";\n\nexport const generateServiceProviderMetadata = (\n  params: GenerateServiceProviderMetadataParams\n): string => {\n  const {\n    issuer,\n    callbackUrl,\n    logoutCallbackUrl,\n    identifierFormat,\n    wantAssertionsSigned,\n    decryptionPvk,\n    privateKey,\n    metadataContactPerson,\n    metadataOrganization,\n    generateUniqueId,\n  } = params;\n\n  let { signingCerts, decryptionCert } = params;\n\n  if (decryptionPvk != null) {\n    if (!decryptionCert) {\n      throw new Error(\n        \"Missing decryptionCert while generating metadata for decrypting service provider\"\n      );\n    }\n  } else {\n    decryptionCert = null;\n  }\n\n  if (privateKey != null) {\n    if (!signingCerts) {\n      throw new Error(\n        \"Missing signingCert while generating metadata for signing service provider messages\"\n      );\n    }\n    signingCerts = !Array.isArray(signingCerts) ? [signingCerts] : signingCerts;\n  } else {\n    signingCerts = null;\n  }\n\n  const metadata: ServiceMetadataXML = {\n    EntityDescriptor: {\n      \"@xmlns\": \"urn:oasis:names:tc:SAML:2.0:metadata\",\n      \"@xmlns:ds\": \"http://www.w3.org/2000/09/xmldsig#\",\n      \"@entityID\": issuer,\n      \"@ID\": generateUniqueId(),\n      SPSSODescriptor: {\n        \"@protocolSupportEnumeration\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@AuthnRequestsSigned\": \"false\",\n      },\n      ...(metadataContactPerson ? { ContactPerson: metadataContactPerson } : {}),\n      ...(metadataOrganization ? { Organization: metadataOrganization } : {}),\n    },\n  };\n\n  if (decryptionCert != null || signingCerts != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor = [];\n    if (isValidSamlSigningOptions(params)) {\n      assertRequired(\n        signingCerts,\n        \"Missing signingCert while generating metadata for signing service provider messages\"\n      );\n\n      metadata.EntityDescriptor.SPSSODescriptor[\"@AuthnRequestsSigned\"] = true;\n\n      const certArray = Array.isArray(signingCerts) ? signingCerts : [signingCerts];\n      const signingKeyDescriptors = certArray.map((cert) => ({\n        \"@use\": \"signing\",\n        \"ds:KeyInfo\": {\n          \"ds:X509Data\": {\n            \"ds:X509Certificate\": {\n              \"#text\": removeCertPEMHeaderAndFooter(cert),\n            },\n          },\n        },\n      }));\n      metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push(signingKeyDescriptors);\n    }\n\n    if (decryptionPvk != null) {\n      assertRequired(\n        decryptionCert,\n        \"Missing decryptionCert while generating metadata for decrypting service provider\"\n      );\n\n      decryptionCert = removeCertPEMHeaderAndFooter(decryptionCert);\n\n      metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push({\n        \"@use\": \"encryption\",\n        \"ds:KeyInfo\": {\n          \"ds:X509Data\": {\n            \"ds:X509Certificate\": {\n              \"#text\": decryptionCert,\n            },\n          },\n        },\n        EncryptionMethod: [\n          // this should be the set that the xmlenc library supports\n          { \"@Algorithm\": \"http://www.w3.org/2009/xmlenc11#aes256-gcm\" },\n          { \"@Algorithm\": \"http://www.w3.org/2009/xmlenc11#aes128-gcm\" },\n          { \"@Algorithm\": \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\" },\n          { \"@Algorithm\": \"http://www.w3.org/2001/04/xmlenc#aes128-cbc\" },\n        ],\n      });\n    }\n  }\n\n  if (logoutCallbackUrl != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.SingleLogoutService = {\n      \"@Binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n      \"@Location\": logoutCallbackUrl,\n    };\n  }\n\n  if (identifierFormat != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.NameIDFormat = identifierFormat;\n  }\n\n  if (wantAssertionsSigned) {\n    metadata.EntityDescriptor.SPSSODescriptor[\"@WantAssertionsSigned\"] = true;\n  }\n\n  metadata.EntityDescriptor.SPSSODescriptor.AssertionConsumerService = {\n    \"@index\": \"1\",\n    \"@isDefault\": \"true\",\n    \"@Binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n    \"@Location\": callbackUrl,\n  } as XMLObject;\n\n  let metadataXml = buildXmlBuilderObject(metadata, true);\n  if (params.signMetadata === true && isValidSamlSigningOptions(params)) {\n    metadataXml = signXmlMetadata(metadataXml, {\n      privateKey: params.privateKey,\n      signatureAlgorithm: params.signatureAlgorithm,\n      xmlSignatureTransforms: params.xmlSignatureTransforms,\n      digestAlgorithm: params.digestAlgorithm,\n    });\n  }\n  return metadataXml;\n};\n"]}